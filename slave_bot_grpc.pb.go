// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: slave_bot.proto

package slavebotgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SlaveBot_StartChat_FullMethodName = "/slavebotgrpc.SlaveBot/StartChat"
)

// SlaveBotClient is the client API for SlaveBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlaveBotClient interface {
	StartChat(ctx context.Context, opts ...grpc.CallOption) (SlaveBot_StartChatClient, error)
}

type slaveBotClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveBotClient(cc grpc.ClientConnInterface) SlaveBotClient {
	return &slaveBotClient{cc}
}

func (c *slaveBotClient) StartChat(ctx context.Context, opts ...grpc.CallOption) (SlaveBot_StartChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &SlaveBot_ServiceDesc.Streams[0], SlaveBot_StartChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveBotStartChatClient{stream}
	return x, nil
}

type SlaveBot_StartChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type slaveBotStartChatClient struct {
	grpc.ClientStream
}

func (x *slaveBotStartChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveBotStartChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SlaveBotServer is the server API for SlaveBot service.
// All implementations must embed UnimplementedSlaveBotServer
// for forward compatibility
type SlaveBotServer interface {
	StartChat(SlaveBot_StartChatServer) error
	mustEmbedUnimplementedSlaveBotServer()
}

// UnimplementedSlaveBotServer must be embedded to have forward compatible implementations.
type UnimplementedSlaveBotServer struct {
}

func (UnimplementedSlaveBotServer) StartChat(SlaveBot_StartChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StartChat not implemented")
}
func (UnimplementedSlaveBotServer) mustEmbedUnimplementedSlaveBotServer() {}

// UnsafeSlaveBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlaveBotServer will
// result in compilation errors.
type UnsafeSlaveBotServer interface {
	mustEmbedUnimplementedSlaveBotServer()
}

func RegisterSlaveBotServer(s grpc.ServiceRegistrar, srv SlaveBotServer) {
	s.RegisterService(&SlaveBot_ServiceDesc, srv)
}

func _SlaveBot_StartChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveBotServer).StartChat(&slaveBotStartChatServer{stream})
}

type SlaveBot_StartChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type slaveBotStartChatServer struct {
	grpc.ServerStream
}

func (x *slaveBotStartChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveBotStartChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SlaveBot_ServiceDesc is the grpc.ServiceDesc for SlaveBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlaveBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slavebotgrpc.SlaveBot",
	HandlerType: (*SlaveBotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartChat",
			Handler:       _SlaveBot_StartChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "slave_bot.proto",
}
